
=== Setting up CJ

Installing a CJ agent is very simple. Follow the two steps below to
set one up!

==== Step 1: Setting up authentication key
CJ assumes that the secure shell (ssh) to cluster is handled in a
password-free manner. There are various ways to achieve this. Some clusters use
Kerberos and some others might use ssh-keygen. We will explain how you could setup
a key using ssh-keygen in this document. ssh-keygen is a Unix utility that is used to
generate, manage, and convert authentication keys for ssh authentication. If you already 
have a password-free connection to your cluster, you may skip this step.



. Check SSH setup
+
--
You can check to see if you already set up the public ssh key. Open a terminal and enter:

[source,bash]
$ ls -al ~/.ssh

if you see any of the following, you probably have already setup the ssh-keygen

    - id_rsa.pub

    - id_dsa.pub

    - id_ecdsa.pub

    - id_ed25519.pub
--

. Generate a SSH key on your machine
+
--
If you have not setup ssh key, do not worry. It is very simple to set up. Open terminal, and enter,

[source,bash]
$ ssh-keygen -t rsa -C "your_email@example.com"
# This will generate a SSH key. Just use the default setting if
# you are asked questions in the process of key generation

This will generate a key in '~/.ssh/id_rsa.pub'
--

. Copy the key to remote server
+
--
The last step is to copy the content of your `$HOME/.ssh/id_rsa.pub` to `$HOME/.ssh/authorized_keys` located on the remote server
--

. Check connection
+
--
You should check your authentication keys by trying to connect to server. In your terminal enter,

[source,bash]
$ ssh username@cluster.stanford.edu

--

[TIP]
====

Some clusters use the so-called Multi-Factor Authentication (e.g., Duo Two-Factor). In this
case, each time you log on, you need to provide an additional code. In order to avoid it, you need to 
add the following lines for each cluster (here `corn.stanford.edu`) to your local `$HOME/.ssh/config` file. 
This will create a tunnel on your first login, and uses the same tunnel for your subsequent connections. 

[source,bash]
Host corn corn?? corn.stanford.edu corn??.stanford.edu
 	ControlMaster auto
 	ControlPath ~/.ssh/%r@%h:%p
 	ControlPersist yes

If you are using Stanford clusters, you may check https://web.stanford.edu/group/farmshare/cgi-bin/wiki/index.php/Advanced_Connection_Options for more info. 

====

==== Step 2: Installing CJ

. Clone ClusterJob from GitHub
+
--
Clone ClusterJob to a directory where you would like to install it, say `~/CJ_install`

------
cd ~/
rm -rf monajemi-clusterjob-* CJ_install
curl -sL  https://github.com/monajemi/clusterjob/tarball/master | tar -zx -  && mv monajemi-clusterjob-* CJ_install
------   
You may also use the following alternative command to clone CJ with the entire history 

	    git clone https://github.com/monajemi/clusterjob.git ~/CJ_install
--


. Install perl dependencies
+
--
ClusterJob is written in perl and so depends on other perl modules. You can install
CJ dependencies via `cpan` or http://search.cpan.org/~miyagawa/App-cpanminus-1.7042/lib/App/cpanminus.pm[`cpanm`]. Copy and paste the following lines into your terminal:

	sudo cpan -i Data::Dumper Data::UUID FindBin File::chdir File::Basename File::Spec IO::Socket::INET IO::Socket::SSL Getopt::Declare  Term::ReadLine JSON::PP JSON::XS Digest::SHA Time::Local Time::Piece Moo HTTP::Thin HTTP::Request::Common JSON URI 

--

. Provide configuration info
+
--
You will need to update the contents of `~/CJ_install/cj_config` file to reflect your own
information. 

This file contains the following information:

	CJID    		 <YOUR CJ ID>			
	CJKEY   		 <YOUR CJ KEY>
	SYNC_TYPE       auto
	SYNC_INTERVAL   300	

[NOTE] 
====
. To use CJ remotely, you need to provide your unique CJID and CJKEY obtained from http://clusterjob.org.
. If you plan to use CJ locally without syncing to CJ remote database, you must provide an arbitrary CJID.
. If you do not include a CJKEY, your meta data will not sync to CJ remote database even if you have registered an acount on http://clusterjob.org.
====

IMPORTANT: You must keep your CJKEY private.  

--

. Provide cluster info
+
--
You will need to update the contents of `/CJ_install/ssh_config` file to reflect your own
server setup.

The CJ convention for each remote machine is

   [MACHINE_ALIAS]
    Host    your_host
    User    your_username
    Bqs     batch_queuing_system
    Repo    CJ_remote_repo
    MAT     Matlab version
    MATlib  Matlab libraries 
    MAT     Matlab version
    MATlib  Matlab libraries 
   [MACHINE_ALIAS]

Example: 

 [sherlock]
	Host		login.sherlock.stanford.edu
	User		monajemi
	Bqs			SLURM
	Repo		/scratch/users/monajemi/CJRepo_Remote
	MAT     	matlab/R2017a
	MATlib		~/BPDN/CVX/cvx:~/mosek/7/toolbox/r2013a
	Python		python/3.6
	Pythonlib	scipy:cuda80:torchvision:pytorch:-c soumith
 [sherlock]

NOTE: You can add as many machines as you want to `ssh_config`.

--





. Build an alias for CJ
+
--
For easy use, you may want to add an alias for calling `src/CJ.pl` to your `~/.profile` or `~/.bashrc`:

    echo "alias cj1='perl ~/CJ_install/src/CJ.pl'" >> ~/.bashrc
    echo "alias cj1='perl ~/CJ_install/src/CJ.pl'" >> ~/.profile
	

--

. Initialize your CJ agent
+
--
You may now initialize your CJ agent by 

[source,bash]
$ cj init


[TIP]
====
You may check if the agent is installed by

[source,bash]
$ cj who

This should print out something like


agent: [red]#E9078FA4-8423-11E6-B9A8-DFE0D454C74A#
====

NOTE: You may install as many CJ agents as needed on a single machine or different machines.

--



////
. Add CJ path to Perl path variable @INC
+
--
To add the CJ path to Perl path variable @INC, add one of the followings to your `~/.bashrc` or `~./profile`
depending on your operating system.

[source,bash]
export PERL5LIB=~/CJ_install/src

or

[source,bash]
export PERLLIB=~/CJ_install/src

To read more about setting up path variable in perl, you may visit

http://perlmaven.com/how-to-change-inc-to-find-perl-modules-in-non-standard-locations

--
////
