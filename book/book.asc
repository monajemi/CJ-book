Clusterjob: Automated reproducibility and hassle-free submission of computational jobs to clusters
==================================================================================================
:Author:    Hatef Monajemi
:Email:     monajemi@stanford.edu

== Introduction

Clusterjob (CJ) is a system for automatizing reproducibility and hassle-free submission of computational jobs to remote cluster from your local machine. CJ is written in perl language and produces 'reporoducible' computational packages for academic publications. The project started at Stanford University by Hatef Monajemi and his PhD advisor David L. Donoho to make the large-scale scientific computing tasks more efficient. Current implementation allows submission of MATLAB jobs. In the future versions, we hope to include other heavily used programming languages such as Python, and R.

== Getting Started


=== CJ on Github

You may access the CJ Github repository at https://github.com/monajemi/clusterjob +
To find the CJ book project, please vist https://github.com/monajemi/CJ-book

<<<<<<<

=== A short history of CJ
CJ is developed at Stanford University during the course of a project in 2013. [More later]


=== Setting up CJ

==== Step 1: Setting up authetication key
CJ assumes that the secure shell (ssh) to cluster is handled is handled in a
password-free manner. There are various ways to achive this. Some clusters use
Kerberos and some others might use ssh-keygen. I will expain how you could setup
a key using ssh-keygen in this document.
ssh-keygen is a Unix utility that is used to
generate, manage, and convert authentication keys for ssh authentication.



. Check SSH setup
+
--
You can check to see if you already set up the public ssh key. Open a terminal and enter:

[source,bash]
$ ls -al ~/.ssh

if you see any of the following, you probably have already setup the ssh-keygen

    - id_rsa.pub

    - id_dsa.pub

    - id_ecdsa.pub

    - id_ed25519.pub
--

. Generate a SSH key on your machine
+
--
If you have not setup ssh key, do not worry. It is very simple to set up. Open terminal, and enter,

[source,bash]
$ ssh-keygen -t rsa -C "your_email@example.com"
# This will generate a SSH key. Just use the default setting if
# you are asked questions in the process of key generation

This will generate a key in '~/.ssh/id_rsa.pub'
--

. Copy the key to remote server
+
--
The last step is to copy the content of your `~/.ssh/id_rsa.pub` to `~/.ssh/authorized_keys` located on the remote server
--

. Check connection
+
--
You should check your authentication keys by trying to connect to server. In your terminal enter,

[source,bash]
$ ssh username@cluster.stanford.edu

--

==== Step 2: Installing CJ

. Clone clusterjob from GitHub
+
--
Clone clusterjob to a directory where you would like to install it, say `~/CJ_install`

    $ git clone https://github.com/monajemi/clusterjob.git ~/CJ_install

--

. Add CJ path to Perl path variable @INC
+
--
To add the CJ path to Perl path variable @INC, add one of the followings to your `~/.bashrc` or `~./profile`
depending on your operating system.

[source,bash]
export PERL5LIB=~/CJ_install/src

or

[source,bash]
export PERLLIB=~/CJ_install/src

To read more about setting up path variable in perl, you may visit

http://perlmaven.com/how-to-change-inc-to-find-perl-modules-in-non-standard-locations

--

. Set up cluster info
+
--
You will need to update the contents of `/CJ_install/ssh_config` file to reflect your own
server setup.

The CJ convention for each remote machine is

    [MACHINE_ALIAS]
    Host    your_host
    User    your_username
    Bqs     cluster_batch_queuing_system
    Repo    CJ_remote_repo
    Matlib  Matlab libraries 
    [MACHINE_ALIAS]

Note that you can add as many machines as you want to `.ssh_config`.

--

. Build an alias for CJ
+
--
For easy use, you may want to add an alias for calling CJ.pl to your `~/.profile` or `~/.bashrc`:

    alias cj='perl ~/CJ_install/src/CJ.pl';

--


=== Using CJ
CJ can currently perform the following tasks:

`run`,`deploy`,`parrun`, `rerun`, `state`,`history`, `show`,`info`, `reduce`,`gather`,`get`, `clean`

To see a full list of options
[source,bash]
cj -help


In what follows, we go over these tasks one by one.

====  RUN

[source,bash]
cj run <script> <machine> -dep <DEPENDENCY_FOLDER> -m <MESSAGE> -mem <MEM_REQUESTED>

====  DEPLOY

[source,bash]
cj deploy <script> <machine> -dep <DEPENDENCY_FOLDER> -m <MESSAGE> -mem <MEM_REQUESTED>


====  PARRUN
parellel run for embarssingly parallel problems.

[source,bash]
cj parrun <script> <machine> -dep <DEPENDENCY_FOLDER> -m <MESSAGE> -mem <MEM_REQUESTED>


==== RERUN
rerun a previously failed package.

[source,bash]
cj rerun <PACKAGE> <FOLDER_NUMBER>


==== STATE

To see the state of the last job submitted through CJ,

[source,bash]
cj state

To see the state of a particular package,

[source,bash]
cj state <PACKAGE>

To see the state of a particular folder in a parrun package,
[source,bash]
cj state <PACKAGE> <FOLDER_NUMBER>

==== HISTORY

To see the last N lines of CJ history,
[source,bash]
cj -h[istory] <N>

To see the history of a particular package,
[source,bash]
cj -h[istory] <PACKAGE>

To see all the history
[source,bash]
cj -h[istory] all

==== INFO

To see the information of the last call to CJ,
[source,bash]
cj info

To see the information of a particular package,
[source,bash]
cj info <PACKAGE>


==== REDUCE

To reduce the results  of the last parrun call,
[source,bash]
cj reduce <RESULTS_FILENAME>

To reduce the results of a particular parrun package,
[source,bash]
cj reduce <RESULTS_FILENAME> <PACKAGE>


==== GET

To get the results  of the last call back,
[source,bash]
cj get

To get the results of a particular package call back,
[source,bash]
cj get <PACKAGE>


==== CLEAN

To remove the last package and its associated jobs,
[source,bash]
cj clean

To remove a particular package and its associated jobs,
[source,bash]
cj clean <PACKAGE>

==== SHOW

To show the program run by CJ at the last call,
[source,bash]
cj show

To show the program run by CJ for a particular package,
[source,bash]
cj show <PACKAGE>





