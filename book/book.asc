Clusterjob: Automated reproducibility and hassle-free submission of computational jobs to clusters
==================================================================================================
:Author:    Hatef Monajemi
:Email:     monajemi@stanford.edu

== Introduction

Clusterjob (CJ) is a system for automatizing reproducibility and hassle-free submission of computational jobs to remote cluster from your local machine. CJ is written in perl language and produces 'reporoducible' computational packages for academic publications. The project started at Stanford University by Hatef Monajemi and his PhD advisor David L. Donoho to make the large-scale scientific computing tasks more efficient. Current implementation allows submission of MATLAB jobs. In the future versions, we hope to include other heavily used programming languages such as Python, and R.

== Getting Started

=== A short history of CJ



=== Setting up CJ

==== Step 1: Setting up authetication key
CJ assumes that the secure shell (ssh) to cluster is handled is handled in a
password-free manner. There are various ways to achive this. Some clusters use
Kerberos and some others might use ssh-keygen. I will expain how you could setup
a key using ssh-keygen in this document.
ssh-keygen is a Unix utility that is used to
generate, manage, and convert authentication keys for ssh authentication.



. Check SSH setup
+
--
You can check to see if you already set up the public ssh key. Open a terminal and enter:

[source,bash]
$ ls -al ~/.ssh

if you see any of the following, you probably have already setup the ssh-keygen

    - id_rsa.pub

    - id_dsa.pub

    - id_ecdsa.pub

    - id_ed25519.pub
--

. Generate a SSH key on your machine
+
--
If you have not setup ssh key, do not worry. It is very simple to set up. Open terminal, and enter,

[source,bash]
$ ssh-keygen -t rsa -C "your_email@example.com"
# This will generate a SSH key. Just use the default setting if
# you are asked questions in the process of key generation

This will generate a key in '~/.ssh/id_rsa.pub'
--

. Copy the key to remote server
+
--
The last step is to copy the content of your `~/.ssh/id_rsa.pub` to `~/.ssh/authorized_keys` located on the remote server
--

. Check connection
+
--
You should check your authentication keys by trying to connect to server. In your terminal enter,

[source,bash]
$ ssh username@cluster.stanford.edu

--

==== Step 2: Installing CJ

. Clone clusterjob from GitHub
+
--
Clone clusterjob to a directory where you would like to install it, say `~/CJ_install`

    $ git clone git@github.com:monajemi/clusterjob.git ~/CJ_install

--

. Add CJ path to Perl path variable @INC
+
--
To add the CJ path to Perl path variable @INC, add one of the followings to your `~/.bashrc` or `~./profile`
depending on your operating system.

[source,bash]
export PERL5LIB=~/CJ_install/src

or

[source,bash]
export PERLLIB=~/CJ_install/src

To read more about setting up path variable in perl, you may visit

http://perlmaven.com/how-to-change-inc-to-find-perl-modules-in-non-standard-locations

--

. Set up cluster info
+
--
You will need to update the contents of `/CJ_install/src/.ssh_config` file to reflect your own
server setup.

The CJ convention for each remote machine is

    [MACHINE_ALIAS]
    Host    your_host
    User    your_username
    Bqs     cluster_batch_queuing_system
    [MACHINE_ALIAS]

Note that you can add as many machines as you want to `.ssh_config`.

--

. Build an alias for CJ
+
--
For easy use, you may want to add an alias for calling CJ.pl to your `~/.profile` or `~/.bashrc`:

    alias cj='perl ~/CJ_install/src/CJ.pl';

--


