
=== Running jobs
We will now go over a simple example to demostrate Clusterjob usage.

==== Matlab simple example 

Suppose we would like to run the following simple matlab 
code. The code includes two `for` loops indexed by `i` and
`j`, and for each such combination it write a line
to the file `results.txt`.

[source,matlab]
.simpleExample.m
----
% This is a test Matlab script for CJ
% Author: Hatef Monajemi June 28 2016

file = 'results.txt';

for i = 1:3
	for j = 1:5
				% write to a text file for testing reduce 	        
		        fid = fopen(file,'at');
		        fprintf(fid, '%i,%i,%i\n', i,j,i+j);
		        fclose(fid)
 end
end
----

This code runs on our personal machine without any error. We now wish to run this code 
on a cluster named 'sherlock' using ClusteJob. To run this code serially, once we are 
in the folder containing `simpleExample.m`, we simply type
the following command in a terminal.

[source,bash]
$ cj run simpleExample.m sherlock -m "This is a simple test for run command"

This command should result in the following output:

[source,bash]
CJmessage::runing [simpleExample.m] on [sherlock]
CJmessage::Sending from: /Users/hatef/github_projects/clusterjob/example/MATLAB
CJmessage::Creating reproducible script(s) reproducible_simpleExample.m
CJmessage::Sending package 07264a5d
CJmessage::Submitting job
CJmessage::1 job(s) submitted (10097640)

The `run` commands uses only one processing core. We could however run our code in parallel by simply changing the command to `parrun`:

[source,bash]
$ cj parrun simpleExample.m sherlock -m "This is a simple test for parrun command"
 
This time, you should see the following output informing you of submitting 15 jobs instead. 

------
CJmessage::parruning [simpleExample.m] on [sherlock]
CJmessage::Sending from: /Users/hatef/github_projects/clusterjob/example/MATLAB
CJmessage::Creating reproducible script(s) reproducible_simpleExample.m
CJmessage::Sending package 0ed00c68
CJmessage::Submitting job(s)
CJmessage::15 job(s) submitted (10097772-10097786)	 
------	 

NOTE: The parallelization of your code happens automatically with no further effort from you. 

