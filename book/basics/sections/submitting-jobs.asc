
=== A simple Matlab example
We will now go over a simple example of running a Matlab code on 
a cluster to demonstrate the usage of ClusterJob.

==== Running Jobs

Suppose we would like to run the following simple matlab 
code. The code includes two `for` loops indexed by `i` and
`j`, and for each such combination it write a line
to the file `results.txt`.

[source,matlab]
.simpleExample.m
----
% This is a test Matlab script for CJ
% Author: Hatef Monajemi June 28 2016

file = 'results.txt';

for i = 1:3
	for j = 1:5
				% write to a text file for testing reduce 	        
		        fid = fopen(file,'at');
		        fprintf(fid, '%i,%i,%i\n', i,j,i+j);
		        fclose(fid)
 end
end
----

This code runs on our personal machine without any error. We now wish to run this code 
on a cluster named **sherlock** using ClusterJob. To run this code serially, once we are 
in the folder containing `simpleExample.m`, we simply type
the following command in a terminal.

[source,bash]
$ cj run simpleExample.m sherlock -m "This is a simple test for run command"

This command should result in the following output:

[source,bash]
CJmessage::runing [simpleExample.m] on [sherlock]
CJmessage::Sending from: /Users/hatef/github_projects/clusterjob/example/MATLAB
CJmessage::Creating reproducible script(s) reproduce_simpleExample.m
CJmessage::Sending package 07264a5d
CJmessage::Submitting job
CJmessage::1 job(s) submitted (10097640)

The `run` command uses only one processing core. We could however run our code in parallel by simply changing the command to `parrun`:

[source,bash]
$ cj parrun simpleExample.m sherlock -m "This is a simple test for parrun command"
 
This time, you should see the following output informing you of submitting 15 jobs instead. 

------
CJmessage::parruning [simpleExample.m] on [sherlock]
CJmessage::Sending from: /Users/hatef/github_projects/clusterjob/example/MATLAB
CJmessage::Creating reproducible script(s) reproduce_simpleExample.m
CJmessage::Sending package 0ed00c68
CJmessage::Submitting job(s)
CJmessage::15 job(s) submitted (10097772-10097786)	 
------	 

NOTE: The parallelization of your code happens automatically with no further effort from you. 

As you can see, each instance of the `run` command produces a reproducible package with a distinct PID (for Package IDentifier). A PID is a SHA1 code, which is essentially a 40 digits long hexadecimal number. Though 
PIDs are 40 digits long, when using CJ commands you can provide only a short version of it, which contains the initial 8 characters only.  

TIP: A PID is valid as long as it is a hexadecimal number of length 8 or more

TIP: The full PID can be retrieved using `$ cj info short_pid` command. 

==== Checking Status

You can check the status of your jobs using `state` command. 

[source,bash]
----
$ cj state 07264a5d

pid 07264a5d33bab71c1463f651b1ff920f6d32bb1c
remote_account: monajemi@sherlock.stanford.edu
job_id: 10109624 
state: COMPLETED
----

Or for a parallel case,

[source,bash]
----
$ cj state 0ed00c68

pid 0ed00c6851c504af7d8064a954aba44cf1da40f2
remote_account: monajemi@sherlock.stanford.edu
1      10097772      COMPLETED
2      10097773      COMPLETED
3      10097774      COMPLETED
4      10097775      COMPLETED
5      10097776      COMPLETED
6      10097777      COMPLETED
7      10097778      COMPLETED
8      10097779      COMPLETED
9      10097780      COMPLETED
10     10097781      COMPLETED
11     10097782      COMPLETED
12     10097783      COMPLETED
13     10097784      COMPLETED
14     10097785      COMPLETED
15     10097786      COMPLETED
----


==== Getting Results
You can pull your computational package entirely or partially using `get` command.
this command will pull the package associated with a particular [red]#PID# into a temporary directory 
on your local machine:

[source,bash]
----
$ cj get 07264a5d

	CJmessage::Getting results from 'sherlock'
	CJmessage::Please see your last results in   
	/Users/hatef/CJ_get_tmp/07264a5d33bab71c1463f651b1ff920f6d32bb1c
----

If we now look at the contents of this package, we would see the following. You may want to take 
a moment to see what is inside each file.

[source,bash]
----
$ ls -lt /Users/hatef/CJ_get_tmp/07264a5d33bab71c1463f651b1ff920f6d32bb1c
total 96
-rwxr-xr-x  1 hatef  staff  2297 Oct  6 16:19 CJ_CONFIRMATION.TXT
-rw-r--r--  1 hatef  staff  2865 Oct  6 16:18 CJrandState.mat
-rw-r--r--  1 hatef  staff    90 Oct  6 16:18 results.txt
drwxr-xr-x  5 hatef  staff   170 Oct  6 16:18 logs
drwxr-xr-x  3 hatef  staff   102 Oct  6 16:18 scripts
-rw-r--r--  1 hatef  staff    29 Oct  6 16:17 qsub.info
-rw-r--r--  1 hatef  staff  1606 Oct  6 16:17 bashMain.sh
-rw-r--r--  1 hatef  staff   901 Oct  6 16:17 master.sh
-rw-r--r--  1 hatef  staff   623 Oct  6 16:17 reproduce_simpleExample.m
-rw-r--r--  1 hatef  staff   308 Oct  6 16:17 simpleExample.m
----

[horizontal]
`CJ_CONFIRMATION.TXT`::  contains confirmation that this package was run by ClusterJob. 
`CJrandState.mat`::  contains the information about the random seed that generated the results so that other people can reproduce your results.
`results.txt`:: is the output of your code
`reproduce_simpleExample.m`:: reproduces these results upon execution.

For a parallel package, if we use `get`, we will see the following output:

[source,bash]
-----
$ cj get 0ed00c6851c504
     CJmessage::Getting results from 'sherlock'
     CJmessage::Run REDUCE before GET for reducing parrun packages
     CJmessage::Please see your last results in   
	 /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2
-----

NOTE: For parallel packages, one typically needs to use `reduce` before `get`

Clearly, we are asked to use `reduce` before `get` for a parallel package. We will discuss `reduce` command
in the next section. If we now look at the folder containing this parallel package, we see:

[source,bash]
-----
$ ls -lt /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2
total 80
-rwxr-xr-x  1 hatef  staff   2429 Oct  7 16:06 CJ_CONFIRMATION.TXT
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:28 13
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:26 15
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:26 14
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 11
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 10
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 6
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 7
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 8
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 3
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 5
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 9
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 4
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 12
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:25 2
drwxr-xr-x  9 hatef  staff    306 Oct  6 22:24 1
-rw-r--r--  1 hatef  staff    435 Oct  6 22:23 qsub.info
-rw-r--r--  1 hatef  staff  11591 Oct  6 22:23 master.sh
-rw-r--r--  1 hatef  staff    308 Oct  6 22:23 simpleExample.m
-----

We now see 15 directories for 15 jobs submitted. If we further look into one of these directories:

[source,bash]
----
$ ls -lt /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2/1
total 40
-rw-r--r--  1 hatef  staff  2865 Oct  6 22:24 CJrandState.mat
-rw-r--r--  1 hatef  staff     6 Oct  6 22:24 results.txt
drwxr-xr-x  5 hatef  staff   170 Oct  6 22:23 logs
drwxr-xr-x  3 hatef  staff   102 Oct  6 22:23 scripts
-rw-r--r--  1 hatef  staff  1953 Oct  6 22:23 bashMain.sh
-rw-r--r--  1 hatef  staff   515 Oct  6 22:23 reproduce_simpleExample.m
-rw-r--r--  1 hatef  staff   196 Oct  6 22:23 simpleExample.m
----

==== Reducing Results
The `reduce` command is designed for reducing the results of a parallel run into a single 
file. This is because the `parrun` command executes the `for` loops in the main script in parallel by
generating independent sub-directories and submitting a separate job for each index combination.

If we look at the `results.txt` file in sub-directories 1 and 2 for instance, we see:
[source,bash]
----
$ cat /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2/1/results.txt
1,1,2
$ cat /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2/2/results.txt
1,2,3
----

We certainly want these results to be reduced to one single `results.txt` file. This is done
via the `reduce` command.

[source,bash]
----
$ cj reduce results.txt 0ed00c68
  
CJmessage::Checking progress of runs...
CJmessage::Reducing results...
CJmessage::Do you want to submit the reduce script to the queue via srun?(recommneded for big jobs) Y/N?
n

 SubPackage 1 Collected (6.67%)
 SubPackage 2 Collected (13.33%)
 SubPackage 3 Collected (20.00%)
 SubPackage 4 Collected (26.67%)
 SubPackage 5 Collected (33.33%)
 SubPackage 6 Collected (40.00%)
 SubPackage 7 Collected (46.67%)
 SubPackage 8 Collected (53.33%)
 SubPackage 9 Collected (60.00%)
 SubPackage 10 Collected (66.67%)
 SubPackage 11 Collected (73.33%)
 SubPackage 12 Collected (80.00%)
 SubPackage 13 Collected (86.67%)
 SubPackage 14 Collected (93.33%)
 SubPackage 15 Collected (100.00%)
CJmessage::Reducing results done! Please use "CJ get 0ed00c68 " to get your results.
----

This will produce the new file `results.txt` in the main directory, which contains:

[source,bash]
----
$ cat /Users/hatef/CJ_get_tmp/0ed00c6851c504af7d8064a954aba44cf1da40f2/results.txt
1,1,2
1,2,3
1,3,4
1,4,5
1,5,6
2,1,3
2,2,4
2,3,5
2,4,6
2,5,7
3,1,4
3,2,5
3,3,6
3,4,7
3,5,8
----

INFO: The file to reduce can be any acceptable MATLAB output, for instance `output.mat`. 
